def build_os_vers = ["22.04", "24.04"]

def parallel_versions = [:]

for (ver in build_os_vers) {
  def version = ver;

  parallel_versions[version] = {
    node("${version} && rustup") {
      def src = null;

      withEnv(["PATH+RUST=${HOME}/.cargo/bin"]) {

        stage("${version}-preparation") {
          src = checkout(scm)
          sh "sudo apt update && sudo apt install --no-install-recommends -y bats mingw-w64"
          sh "rustup target add x86_64-pc-windows-gnu"
        }

        stage("${version}-build") {
          sh "cargo build"
        }

        stage("${version}-check") {
          sh "cargo check --message-format json > target/report-${version}.log"
          recordIssues(aggregatingResults: true, publishAllIssues: true,
                       tools: [cargo(id: "cargo-check-${version}",
                                     name: "Check ${version}",
                                     pattern: "**/target/report-${version}.log")])
        }

        stage("${version}-test") {
          warnError("test") {
            sh "cargo test"
          }
        }

        stage("${version}-clippy") {
          warnError("clippy") {
            sh "cargo clippy --message-format json > target/report-${version}.log"
            recordIssues(aggregatingResults: true, publishAllIssues: true,
                         tools: [cargo(id: "cargo-clippy-${version}",
                                       name: "Clippy ${version}",
                                       pattern: "**/target/report-${version}.log")])
          }
        }

        stage("${version}-bats") {
          warnError("run") {
            sh "bats ./tests"
          }
        }

        stage("${version}-build-windows") {
          sh "cargo build --target x86_64-pc-windows-gnu"
        }

      } // withEnv

    } //node

  } // parallel_versions

  parallel_versions["${version}-deb"] = {
    node("${version}") {

      stage("${version}-deb-preparation") {
        src = checkout(scm)
        sh "sudo apt update && sudo apt install --no-install-recommends -y devscripts build-essential equivs"
      }

      stage("${version}-deb-dependencies") {
        sh "mk-build-deps && sudo apt install -y ./upbuild.rs-build-deps_*_all.deb && git clean -xffd"
      }

      stage("${version}-deb-build") {
        sh "dpkg-buildpackage -us -uc"
      }

      stage("${version}-deb-install") {
        sh "sudo apt install -y ../upbuild-rs_*.deb"
      }

    } //node

  } // parallel_versions

} // versions
parallel parallel_versions
