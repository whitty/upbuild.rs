def build_os_vers = ["20.04", "22.04", "24.04"]
def deb_os_vers = ["24.04"]
def wine_os_vers = ["24.04"]

def parallel_versions = [:]

for (ver in build_os_vers) {
  def version = ver;

  parallel_versions[version] = {
    node("${version} && rustup") {
      def src = null;

      withEnv(["PATH+RUST=${HOME}/.cargo/bin", "WINEDEBUG=-all"]) {

        stage("${version}-preparation") {
          src = checkout(scm)

          def deps = "bats";
          if (version in wine_os_vers) {
            deps += " mingw-w64 wine64 wine"
          }
          sh "sudo apt update && sudo apt install --no-install-recommends -y $deps"
        }

        stage("${version}-build") {
          sh "cargo build"
        }

        stage("${version}-check") {
          sh "cargo check --message-format json > target/report-${version}.log || (cargo check; false)"
          recordIssues(aggregatingResults: true, publishAllIssues: true,
                       tools: [cargo(id: "cargo-check-${version}",
                                     name: "Check ${version}",
                                     pattern: "**/target/report-${version}.log")])
        }

        stage("${version}-test") {
          warnError("test") {
            sh "cargo test"
          }
        }

        stage("${version}-clippy") {
          warnError("clippy") {
            sh "cargo clippy --message-format json -- --deny warnings > target/report-${version}.log || (cargo clippy -- --deny warnings; false)"
            recordIssues(aggregatingResults: true, publishAllIssues: true,
                         tools: [cargo(id: "cargo-clippy-${version}",
                                       name: "Clippy ${version}",
                                       pattern: "**/target/report-${version}.log")])
          }
        }

        stage("${version}-bats") {
          warnError("run") {
            def bat_env = ""
            if (!(version in wine_os_vers)) {
              bat_env="env NOWINE=true "
            }

            sh "${bat_env}bats ./tests"
          }
        }

        if (version in wine_os_vers) {
          stage("${version}-build-windows") {
            sh "cargo build --target x86_64-pc-windows-gnu"
          }

          stage("${version}-test-windows") {
            sh "env CARGO_TARGET_X86_64_PC_WINDOWS_GNU_RUNNER=wine cargo test --target x86_64-pc-windows-gnu"
          }
        }

      } // withEnv

    } //node

  } // parallel_versions

  // deb builds below
  if (!(version in deb_os_vers)) { continue }

  parallel_versions["${version}-deb"] = {
    node("${version}") {

      stage("${version}-deb-preparation") {
        src = checkout(scm)
        sh "sudo apt update && sudo apt install --no-install-recommends -y devscripts build-essential equivs"
      }

      stage("${version}-deb-dependencies") {
        sh "mk-build-deps && sudo apt install -y ./upbuild.rs-build-deps_*_all.deb && git clean -xffd"
      }

      stage("${version}-deb-build") {
        sh "dpkg-buildpackage -us -uc"
      }

      stage("${version}-deb-install") {
        sh "sudo apt install -y ../upbuild-rs_*.deb"
      }

      stage("${version}-deb-test") {
        warnError("installed-test-${version}") {
          sh "git clean -xffd"
          sh "sudo apt update && sudo apt install --no-install-recommends -y bats"
          //// TODO - wine fails here, just hard-skip it
          sh 'rm -f tests/wine.bats'
          sh 'env UPBUILD_OVERRIDE=/usr/bin/upbuild bats tests/'
          sh "git clean -xffd"
        }
      }

    } //node

  } // parallel_versions

} // versions
parallel parallel_versions
